{"ast":null,"code":"import { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-skeleton-loader-config.types.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    circle: a0,\n    progress: a1,\n    \"progress-dark\": a2,\n    pulse: a3\n  };\n};\n\nfunction NgxSkeletonLoaderComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(4, _c0, ctx_r0.appearance === \"circle\", ctx_r0.animation === \"progress\", ctx_r0.animation === \"progress-dark\", ctx_r0.animation === \"pulse\"))(\"ngStyle\", ctx_r0.theme);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-valuetext\", ctx_r0.loadingText);\n  }\n}\n\nfunction NgxSkeletonLoaderConfig() {}\n\nif (false) {\n  /** @type {?} */\n  NgxSkeletonLoaderConfig.prototype.appearance;\n  /** @type {?} */\n\n  NgxSkeletonLoaderConfig.prototype.animation;\n  /** @type {?} */\n\n  NgxSkeletonLoaderConfig.prototype.theme;\n  /** @type {?} */\n\n  NgxSkeletonLoaderConfig.prototype.loadingText;\n  /** @type {?} */\n\n  NgxSkeletonLoaderConfig.prototype.count;\n  /** @type {?} */\n\n  NgxSkeletonLoaderConfig.prototype.ariaLabel;\n}\n/** @type {?} */\n\n\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-skeleton-loader.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet NgxSkeletonLoaderComponent = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderComponent {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n      const {\n        appearance = 'line',\n        animation = 'progress',\n        theme = null,\n        loadingText = 'Loading...',\n        count = 1,\n        ariaLabel = 'loading'\n      } = config || {};\n      this.appearance = appearance;\n      this.animation = animation;\n      this.theme = theme;\n      this.loadingText = loadingText;\n      this.count = count;\n      this.items = [];\n      this.ariaLabel = ariaLabel;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      start('NgxSkeletonLoader:Rendered');\n      start('NgxSkeletonLoader:Loaded');\n      this.validateInputValues();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    validateInputValues() {\n      // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n      if (!/^\\d+$/.test(`${this.count}`)) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n        }\n\n        this.count = 1;\n      }\n\n      this.items.length = this.count;\n      /** @type {?} */\n\n      const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n\n      if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n        }\n\n        this.animation = 'progress';\n      }\n\n      if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`);\n        }\n\n        this.appearance = '';\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      // Avoiding multiple calls for the same input in case there's no changes in the fields\n      // Checking if the fields that require validation are available and if they were changed\n      // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n      if (['count', 'animation', 'appearance'].find(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n        return;\n      }\n\n      this.validateInputValues();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      end('NgxSkeletonLoader:Rendered');\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      end('NgxSkeletonLoader:Loaded');\n    }\n\n  }\n\n  NgxSkeletonLoaderComponent.ɵfac = function NgxSkeletonLoaderComponent_Factory(t) {\n    return new (t || NgxSkeletonLoaderComponent)(ɵngcc0.ɵɵdirectiveInject(NGX_SKELETON_LOADER_CONFIG, 8));\n  };\n\n  NgxSkeletonLoaderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxSkeletonLoaderComponent,\n    selectors: [[\"ngx-skeleton-loader\"]],\n    inputs: {\n      appearance: \"appearance\",\n      animation: \"animation\",\n      theme: \"theme\",\n      loadingText: \"loadingText\",\n      count: \"count\",\n      ariaLabel: \"ariaLabel\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"loader\", \"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 1, \"loader\", 3, \"ngClass\", \"ngStyle\"]],\n    template: function NgxSkeletonLoaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgxSkeletonLoaderComponent_span_0_Template, 1, 9, \"span\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass, ɵngcc1.NgStyle],\n    styles: [\".loader[_ngcontent-%COMP%]{background:#eff1f6 no-repeat;border-radius:4px;box-sizing:border-box;display:inline-block;height:20px;margin-bottom:10px;overflow:hidden;position:relative;width:100%;will-change:transform}.loader[_ngcontent-%COMP%]:after, .loader[_ngcontent-%COMP%]:before{box-sizing:border-box}.loader.circle[_ngcontent-%COMP%]{border-radius:50%;height:40px;margin:5px;width:40px}.loader.progress[_ngcontent-%COMP%], .loader.progress-dark[_ngcontent-%COMP%]{transform:translateZ(0)}.loader.progress-dark[_ngcontent-%COMP%]:after, .loader.progress-dark[_ngcontent-%COMP%]:before, .loader.progress[_ngcontent-%COMP%]:after, .loader.progress[_ngcontent-%COMP%]:before{box-sizing:border-box}.loader.progress-dark[_ngcontent-%COMP%]:before, .loader.progress[_ngcontent-%COMP%]:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;content:\\\"\\\";height:100%;left:0;position:absolute;top:0;width:200px;z-index:1}.loader.progress[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.6),hsla(0,0%,100%,0))}.loader.progress-dark[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse[_ngcontent-%COMP%]{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}@media (prefers-reduced-motion:reduce){.loader.progress[_ngcontent-%COMP%], .loader.progress-dark[_ngcontent-%COMP%], .loader.pulse[_ngcontent-%COMP%]{-webkit-animation:none;animation:none}.loader.progress[_ngcontent-%COMP%], .loader.progress-dark[_ngcontent-%COMP%]{background-image:none}}@-webkit-keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\"],\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return NgxSkeletonLoaderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  NgxSkeletonLoaderComponent.ngAcceptInputType_count;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.ngAcceptInputType_animation;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.count;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.loadingText;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.appearance;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.animation;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.ariaLabel;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.theme;\n  /** @type {?} */\n\n  NgxSkeletonLoaderComponent.prototype.items;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-skeleton-loader.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxSkeletonLoaderModule = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderModule {\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config) {\n      return {\n        ngModule: NgxSkeletonLoaderModule,\n        providers: [{\n          provide: NGX_SKELETON_LOADER_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  NgxSkeletonLoaderModule.ɵfac = function NgxSkeletonLoaderModule_Factory(t) {\n    return new (t || NgxSkeletonLoaderModule)();\n  };\n\n  NgxSkeletonLoaderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxSkeletonLoaderModule\n  });\n  NgxSkeletonLoaderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxSkeletonLoaderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxSkeletonLoaderModule, {\n    declarations: function () {\n      return [NgxSkeletonLoaderComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxSkeletonLoaderComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-skeleton-loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule }; //# sourceMappingURL=ngx-skeleton-loader.js.map","map":null,"metadata":{},"sourceType":"module"}