{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LocalstorageService = /*#__PURE__*/(() => {\n  class LocalstorageService {\n    // tslint:disable-next-line:ban-types\n    constructor(http, platformId) {\n      this.http = http;\n      this.platformId = platformId;\n      this.state$ = new BehaviorSubject({});\n      this.stateKey = 'state'; // @Inject('LocalStorage') public localStorage: Storage\n\n      if (isPlatformBrowser(this.platformId)) {\n        // @ts-ignore\n        this.state = JSON.parse(localStorage.getItem(this.stateKey));\n        Object.freeze(this.state);\n        this.state$.next(this.state);\n      } else {\n        return;\n      }\n    }\n\n    ClearStorage() {\n      if (isPlatformBrowser(this.platformId)) {\n        localStorage.clear();\n      }\n    }\n\n    setState(key, value) {\n      if (isPlatformBrowser(this.platformId)) {\n        this.state = Object.assign(Object.assign({}, this.state), {\n          [key]: value\n        });\n        localStorage.setItem(this.stateKey, JSON.stringify(this.state));\n        Object.freeze(this.state);\n        this.state$.next(this.state);\n      } else {\n        return;\n      }\n    }\n\n  }\n\n  // End of Class\n  LocalstorageService.ɵfac = function LocalstorageService_Factory(t) {\n    return new (t || LocalstorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  LocalstorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalstorageService,\n    factory: LocalstorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocalstorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}