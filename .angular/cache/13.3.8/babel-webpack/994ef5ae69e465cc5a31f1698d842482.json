{"ast":null,"code":"import { Injectable, Inject, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Meta, Title } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nlet JsonLdService = /*#__PURE__*/(() => {\n  class JsonLdService {\n    constructor(document) {\n      this.document = document;\n    }\n\n    setData(data) {\n      this.jsonLd = data;\n      this.inject();\n    }\n\n    getObject(type, rawData, context = 'http://schema.org') {\n      let object = {\n        '@type': type\n      };\n\n      if (context) {\n        object = Object.assign({\n          '@context': context\n        }, object);\n      }\n\n      if (rawData) {\n        object = Object.assign(Object.assign({}, object), rawData);\n      }\n\n      return object;\n    }\n\n    inject() {\n      let ldJsonScriptTag = this.document.head.querySelector(`script[type='application/ld+json']`);\n\n      if (ldJsonScriptTag) {\n        ldJsonScriptTag.textContent = JSON.stringify(this.jsonLd);\n      } else {\n        ldJsonScriptTag = this.document.createElement('script');\n        ldJsonScriptTag.setAttribute('type', 'application/ld+json');\n        ldJsonScriptTag.textContent = JSON.stringify(this.jsonLd);\n        this.document.head.appendChild(ldJsonScriptTag);\n      }\n    }\n\n  }\n\n  JsonLdService.ɵfac = function JsonLdService_Factory(t) {\n    return new (t || JsonLdService)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  JsonLdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: JsonLdService,\n    factory: JsonLdService.ɵfac\n  });\n  return JsonLdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet JsonLdModule = /*#__PURE__*/(() => {\n  class JsonLdModule {}\n\n  JsonLdModule.ɵfac = function JsonLdModule_Factory(t) {\n    return new (t || JsonLdModule)();\n  };\n\n  JsonLdModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: JsonLdModule\n  });\n  JsonLdModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [JsonLdService]\n  });\n  return JsonLdModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NgxSeoMetaTagAttr = /*#__PURE__*/(() => {\n  (function (NgxSeoMetaTagAttr) {\n    NgxSeoMetaTagAttr[\"name\"] = \"name\";\n    NgxSeoMetaTagAttr[\"property\"] = \"property\";\n  })(NgxSeoMetaTagAttr || (NgxSeoMetaTagAttr = {}));\n\n  return NgxSeoMetaTagAttr;\n})();\nlet SeoSocialShareService = /*#__PURE__*/(() => {\n  class SeoSocialShareService {\n    constructor(metaService, titleService, document) {\n      this.metaService = metaService;\n      this.titleService = titleService;\n      this.document = document;\n    }\n\n    setData(data) {\n      this.setSection(data.section);\n      this.setKeywords(data.keywords);\n      this.setTitle(data.title);\n      this.setType(data.type);\n      this.setDescription(data.description);\n      this.setImage(data.image, data.imageAuxData);\n      this.setUrl(data.url);\n      this.setPublished(data.published);\n      this.setModified(data.modified);\n      this.setAuthor(data.author);\n    }\n\n    setKeywords(keywords) {\n      if (Boolean(keywords)) {\n        this.metaService.updateTag({\n          name: 'keywords',\n          content: keywords\n        });\n      } else {\n        this.metaService.removeTag(`name='keywords'`);\n      }\n    }\n\n    setSection(section) {\n      if (Boolean(section)) {\n        this.metaService.updateTag({\n          name: 'article:section',\n          content: section\n        });\n      } else {\n        this.metaService.removeTag(`name='article:section'`);\n      }\n    }\n\n    setTitle(title = '') {\n      this.titleService.setTitle(title);\n\n      if (title && title.length) {\n        this.metaService.updateTag({\n          name: 'twitter:title',\n          content: title\n        });\n        this.metaService.updateTag({\n          name: 'twitter:image:alt',\n          content: title\n        });\n        this.metaService.updateTag({\n          property: 'og:image:alt',\n          content: title\n        });\n        this.metaService.updateTag({\n          property: 'og:title',\n          content: title\n        });\n        this.metaService.updateTag({\n          name: 'title',\n          content: title\n        });\n        this.metaService.updateTag({\n          itemprop: 'name',\n          content: title\n        }, `itemprop='name'`);\n      } else {\n        this.metaService.removeTag(`name='twitter:title'`);\n        this.metaService.removeTag(`name='twitter:image:alt'`);\n        this.metaService.removeTag(`property='og:image:alt'`);\n        this.metaService.removeTag(`property='og:title'`);\n        this.metaService.removeTag(`name='title'`);\n        this.metaService.removeTag(`itemprop='name'`);\n      }\n    }\n\n    setType(type) {\n      if (type && type.length) {\n        this.metaService.updateTag({\n          property: 'og:type',\n          content: type\n        });\n      } else {\n        this.metaService.removeTag(`property='og:type'`);\n      }\n    }\n\n    setDescription(description) {\n      if (description && description.length) {\n        this.metaService.updateTag({\n          name: 'twitter:description',\n          content: description\n        });\n        this.metaService.updateTag({\n          property: 'og:description',\n          content: description\n        });\n        this.metaService.updateTag({\n          name: 'description',\n          content: description\n        });\n        this.metaService.updateTag({\n          itemprop: 'description',\n          content: description\n        }, `itemprop='description'`);\n      } else {\n        this.metaService.removeTag(`name='twitter:description'`);\n        this.metaService.removeTag(`property='og:description'`);\n        this.metaService.removeTag(`name='description'`);\n        this.metaService.removeTag(`itemprop='description'`);\n      }\n    }\n\n    setImage(image, auxData) {\n      if (image && image.length) {\n        this.metaService.updateTag({\n          name: 'twitter:image',\n          content: image\n        });\n        this.metaService.updateTag({\n          itemprop: 'image',\n          content: image\n        }, `itemprop='image'`);\n        this.metaService.updateTag({\n          property: 'og:image',\n          content: image\n        });\n\n        if (auxData && auxData.height) {\n          this.metaService.updateTag({\n            property: 'og:image:height',\n            content: auxData.height.toString()\n          });\n        } else {\n          this.metaService.removeTag(`property='og:image:height'`);\n        }\n\n        if (auxData && auxData.width) {\n          this.metaService.updateTag({\n            property: 'og:image:width',\n            content: auxData.width.toString()\n          });\n        } else {\n          this.metaService.removeTag(`property='og:image:width'`);\n        }\n\n        if (auxData && auxData.alt) {\n          this.metaService.updateTag({\n            property: 'og:image:alt',\n            content: auxData.alt\n          });\n          this.metaService.updateTag({\n            property: 'twitter:image:alt',\n            content: auxData.alt\n          });\n        } else {\n          this.metaService.removeTag(`property='og:image:alt'`);\n          this.metaService.removeTag(`property='twitter:image:alt'`);\n        }\n\n        if (auxData && auxData.mimeType) {\n          this.metaService.updateTag({\n            property: 'og:image:type',\n            content: auxData.mimeType\n          });\n        } else {\n          this.metaService.removeTag(`property='og:image:type'`);\n        }\n\n        if (auxData && auxData.secureUrl) {\n          this.metaService.updateTag({\n            property: 'og:image:secure_url',\n            content: auxData.secureUrl\n          });\n        } else {\n          this.metaService.removeTag(`property='og:image:secure_url'`);\n        }\n      } else {\n        this.metaService.removeTag(`name='twitter:image'`);\n        this.metaService.removeTag(`property='twitter:image:alt'`);\n        this.metaService.removeTag(`property='og:image'`);\n        this.metaService.removeTag(`property='og:image:height'`);\n        this.metaService.removeTag(`property='og:image:secure_url'`);\n        this.metaService.removeTag(`property='og:image:type'`);\n        this.metaService.removeTag(`property='og:image:alt'`);\n        this.metaService.removeTag(`property='og:image:width'`);\n        this.metaService.removeTag(`itemprop='image'`);\n      }\n    }\n\n    setUrl(url) {\n      if (url && url.length) {\n        this.metaService.updateTag({\n          property: 'og:url',\n          content: url\n        });\n      } else {\n        this.metaService.removeTag(`property='og:url'`);\n      }\n\n      this.setCanonicalUrl(url);\n    }\n\n    setPublished(publishedDateString) {\n      if (publishedDateString) {\n        const publishedDate = new Date(publishedDateString);\n        this.metaService.updateTag({\n          name: 'article:published_time',\n          content: publishedDate.toISOString()\n        });\n        this.metaService.updateTag({\n          name: 'published_date',\n          content: publishedDate.toISOString()\n        });\n      } else {\n        this.metaService.removeTag(`name='article:published_time'`);\n        this.metaService.removeTag(`name='publication_date'`);\n      }\n    }\n\n    setModified(modifiedDateString) {\n      if (modifiedDateString) {\n        const modifiedDate = new Date(modifiedDateString);\n        this.metaService.updateTag({\n          name: 'article:modified_time',\n          content: modifiedDate.toISOString()\n        });\n        this.metaService.updateTag({\n          name: 'og:updated_time',\n          content: modifiedDate.toISOString()\n        });\n      } else {\n        this.metaService.removeTag(`name='article:modified_time'`);\n        this.metaService.removeTag(`name='og:updated_time'`);\n      }\n    }\n\n    setAuthor(author) {\n      if (author && author.length) {\n        this.metaService.updateTag({\n          name: 'article:author',\n          content: author\n        });\n        this.metaService.updateTag({\n          name: 'author',\n          content: author\n        });\n      } else {\n        this.metaService.removeTag(`name='article:author'`);\n        this.metaService.removeTag(`name='author'`);\n      }\n    }\n\n    setTwitterSiteCreator(site) {\n      if (Boolean(site)) {\n        this.metaService.updateTag({\n          name: 'twitter:site',\n          content: site\n        });\n        this.metaService.updateTag({\n          name: 'twitter:creator',\n          content: site\n        });\n      } else {\n        this.metaService.removeTag(`name='twitter:site'`);\n        this.metaService.removeTag(`name='twitter:creator'`);\n      }\n    }\n\n    setTwitterCard(card) {\n      if (Boolean(card)) {\n        this.metaService.updateTag({\n          name: 'twitter:card',\n          content: card\n        });\n      } else {\n        this.metaService.removeTag(`name='twitter:card'`);\n      }\n    }\n\n    setFbAppId(appId) {\n      if (Boolean(appId)) {\n        this.metaService.updateTag({\n          property: 'fb:app_id',\n          content: appId\n        });\n      } else {\n        this.metaService.removeTag(`property='fb:app_id'`);\n      }\n    }\n\n    setMetaTag(metaTag) {\n      if (Boolean(metaTag.value)) {\n        const metaTagObject = {\n          [metaTag.attr]: metaTag.attrValue,\n          content: metaTag.value\n        };\n        this.metaService.updateTag(metaTagObject);\n      } else {\n        const selector = `${metaTag.attr}='${metaTag.attrValue}'`;\n        this.metaService.removeTag(selector);\n      }\n    }\n\n    setMetaTags(metaTags) {\n      for (const metaTag of metaTags) {\n        this.setMetaTag(metaTag);\n      }\n    }\n\n    setLanguageAlternativeUrl(lang, url) {\n      // first remove potential previous url\n      const selector = `link[rel='alternate'][hreflang='${lang}']`;\n      const languageAlternativeElement = this.document.head.querySelector(selector);\n\n      if (languageAlternativeElement) {\n        this.document.head.removeChild(languageAlternativeElement);\n      }\n\n      if (url && url.length) {\n        const link = this.document.createElement('link');\n        link.setAttribute('rel', 'alternate');\n        link.setAttribute('hreflang', lang);\n        link.setAttribute('href', url);\n        this.document.head.appendChild(link);\n      }\n    }\n\n    setCanonicalUrl(url) {\n      // first remove potential previous url\n      const selector = `link[rel='canonical']`;\n      const canonicalElement = this.document.head.querySelector(selector);\n\n      if (canonicalElement) {\n        this.document.head.removeChild(canonicalElement);\n      }\n\n      if (url && url.length) {\n        const link = this.document.createElement('link');\n        link.setAttribute('rel', 'canonical');\n        link.setAttribute('href', url);\n        this.document.head.appendChild(link);\n      }\n    }\n\n  }\n\n  SeoSocialShareService.ɵfac = function SeoSocialShareService_Factory(t) {\n    return new (t || SeoSocialShareService)(ɵngcc0.ɵɵinject(ɵngcc1.Meta), ɵngcc0.ɵɵinject(ɵngcc1.Title), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  SeoSocialShareService.ɵprov = ɵɵdefineInjectable({\n    factory: function SeoSocialShareService_Factory() {\n      return new SeoSocialShareService(ɵɵinject(Meta), ɵɵinject(Title), ɵɵinject(DOCUMENT));\n    },\n    token: SeoSocialShareService,\n    providedIn: \"root\"\n  });\n  return SeoSocialShareService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-seo\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { JsonLdModule, JsonLdService, NgxSeoMetaTagAttr, SeoSocialShareService }; //# sourceMappingURL=ngx-seo.js.map","map":null,"metadata":{},"sourceType":"module"}