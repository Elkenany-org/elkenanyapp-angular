{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngneat/hot-toast\";\nexport let ToasterService = /*#__PURE__*/(() => {\n  class ToasterService {\n    constructor(toast) {\n      this.toast = toast;\n      this.loadingSub = new BehaviorSubject(false);\n      /**\r\n       * Contains in-progress loading requests\r\n       */\n\n      this.loadingMap = new Map();\n    }\n\n    showSuccess(msg, time = 3000) {\n      this.toast.success(msg, {\n        duration: time\n      });\n    }\n\n    showFail(msg, duration = 3000) {\n      this.toast.error(msg, {\n        duration\n      });\n    }\n\n    loading(value) {\n      this.toast.loading(value, {\n        id: 'loading',\n        position: 'top-center'\n      });\n    }\n\n    stopLoading() {\n      this.toast.close('loading');\n    }\n\n    setLoading(loading, url) {\n      if (!url) {\n        throw new Error('The request URL must be provided to the LoadingService.setLoading function');\n      }\n\n      if (loading === true) {\n        this.loadingMap.set(url, loading);\n        this.loadingSub.next(true);\n      } else if (loading === false && this.loadingMap.has(url)) {\n        this.loadingMap.delete(url);\n      }\n\n      if (this.loadingMap.size === 0) {\n        this.loadingSub.next(false);\n      }\n    }\n\n  }\n\n  ToasterService.ɵfac = function ToasterService_Factory(t) {\n    return new (t || ToasterService)(i0.ɵɵinject(i1.HotToastService));\n  };\n\n  ToasterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ToasterService,\n    factory: ToasterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToasterService;\n})();","map":null,"metadata":{},"sourceType":"module"}