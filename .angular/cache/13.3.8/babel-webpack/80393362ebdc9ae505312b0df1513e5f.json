{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/@core/services/toastr.service\";\nimport * as i2 from \"../services/auth/localstorage.service\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    // constructor(\n    //   private localStorageService: LocalstorageService,\n    // ) {}\n    // intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    //   request = request.clone({\n    //     setHeaders: {\n    //       device: 'web',\n    //       Authorization: `Bearer ${this.localStorageService.state$.getValue()?.['token']}`,\n    //       Accept: 'application/json'\n    //     },\n    //   });\n    //   return next.handle(request);\n    // }\n    constructor(_loading, localStorageService) {\n      this._loading = _loading;\n      this.localStorageService = localStorageService;\n    }\n\n    intercept(request, next) {\n      var _a;\n\n      if (request.url != \"https://fcm.googleapis.com/fcm/send\") {\n        request = request.clone({\n          setHeaders: {\n            device: 'web',\n            Authorization: `Bearer ${((_a = this.localStorageService.state$.getValue()) === null || _a === void 0 ? void 0 : _a['token']) || ''} `,\n            Accept: 'application/json'\n          }\n        });\n      }\n\n      this._loading.setLoading(true, request.url);\n\n      return next.handle(request).pipe(finalize(() => this._loading.setLoading(false, request.url)));\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.ToasterService), i0.ɵɵinject(i2.LocalstorageService));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}