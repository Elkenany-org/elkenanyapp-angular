{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { environment as env } from '../../../../environments/environment';\nimport { GoogleAuthProvider } from 'firebase/auth';\nimport { FacebookLoginProvider, GoogleLoginProvider } from 'angularx-social-login';\nimport { environment } from \"environments/environment\";\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./localstorage.service\";\nimport * as i3 from \"@app/@core/services/toastr.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"angularx-social-login\";\nimport * as i6 from \"@angular/fire/compat/auth\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    // private auth2?:gapi.auth2.GoogleAuth\n    // private subject = new ReplaySubject<gapi.auth2.GoogleUser|null>(1)\n    constructor(http, localStorageService, Toaster, router, route, socialAuthService, afAuth) {\n      this.http = http;\n      this.localStorageService = localStorageService;\n      this.Toaster = Toaster;\n      this.router = router;\n      this.route = route;\n      this.socialAuthService = socialAuthService;\n      this.afAuth = afAuth;\n      this.deviceToken = new EventEmitter();\n      this.dataTonav = new EventEmitter();\n      this.userDataBehaviorSubject = new BehaviorSubject(null);\n      this.Url = `${env.ApiUrl}`;\n      this.currentURL = this.route.snapshot.queryParams['returnUrl'] || '/'; //   loadJsScript(renderer: Renderer2, src: string) {\n      //     const script = renderer.createElement('script');\n      //     script.type = 'text/javascript';\n      //     script.src = src;\n      //     renderer.appendChild(document.body, script);\n      //     window.onload = function () {\n      //       google.accounts.id.initialize({\n      //         client_id: \"552649577410-qs09ipcibvdfcfd97phi3drru3qufis0.apps.googleusercontent.com\",\n      //         callback : (response: any)=>{\n      //           const helper = new JwtHelperService();\n      //             const responsePayload = helper.decodeToken(response.credential);\n      //             console.log(\"ID: \" + responsePayload.sub);\n      //             console.log('Full Name: ' + responsePayload.name);\n      //             console.log('Given Name: ' + responsePayload.given_name);\n      //             console.log('Family Name: ' + responsePayload.family_name);\n      //             console.log(\"Image URL: \" + responsePayload.picture);\n      //             console.log(\"Email: \" + responsePayload.email);    \n      //     }\n      //         }\n      //       );\n      //       google.accounts.id.renderButton(\n      //         document.getElementById(\"buttonDiv\"),\n      //         { theme: \"outline\", size: \"large\" }  // customization attributes\n      //       );\n      //       google.accounts.id.prompt(); // also display the One Tap dialog\n      //     }\n      //   }\n      //   }\n      // //   handleCredentialResponse(response: any) {\n      // // \n\n      this.deviceTokenTemp = \"\";\n      this.message = null;\n    }\n\n    GoogleAuth() {\n      return this.AuthLogin(new GoogleAuthProvider());\n    } // Auth logic to run auth providers\n\n\n    AuthLogin(provider) {\n      let returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n      return this.afAuth.signInWithPopup(provider).then(result => {\n        var _a;\n\n        let res = (_a = result === null || result === void 0 ? void 0 : result.additionalUserInfo) === null || _a === void 0 ? void 0 : _a.profile; // console.log(res);\n\n        let data = {\n          email: res === null || res === void 0 ? void 0 : res.email,\n          name: `${res.given_name} ${res.family_name}`,\n          google_id: res === null || res === void 0 ? void 0 : res.id,\n          device_token: '52151'\n        };\n        this.RegisterLogin_google(data).subscribe(res => {\n          // console.log(res);\n          this.localStorageService.setState('token', res.data.api_token);\n          let user = {\n            name: res.data.name,\n            email: res.data.email,\n            phone: ''\n          };\n          localStorage.setItem('user', JSON.stringify(user));\n          this.router.navigateByUrl(returnUrl || '');\n        });\n        console.log('You have been successfully logged in!');\n      }).catch(error => {\n        console.log(error.error);\n      });\n    }\n\n    AuthLoginSocial() {\n      //         console.log(response);\n      // let returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n      //     let data = {\n      //       email:response?.email,\n      //       name:response?.name,\n      //       google_id:response?.sub,\n      //       device_token:'52151',\n      //     }\n      //     this.RegisterLogin_google(data).subscribe((res:any) => {\n      //       console.log(res);\n      //       this.localStorageService.setState('token', res.data.api_token);\n      //       let user = {\n      //         name: res.data.name,\n      //         email:  res.data.email,\n      //         phone: ''\n      //       }\n      //       localStorage.setItem('user',JSON.stringify(user))\n      //       this.router.navigateByUrl(returnUrl||'');\n      //     })\n      console.log('You have been successfully logged in!');\n    }\n\n    profile() {\n      return this.http.get(`${env.ApiUrl}/profile`);\n    }\n\n    updateProfile(body) {\n      return this.http.post(`${env.ApiUrl}/profile-update`, body);\n    }\n\n    RegisterLogin_google(data) {\n      return this.http.post(`${this.Url}/reg-log-google`, data).pipe(tap(data => {// this.localStorageService.setState('token', data?.data?.api_token)\n        // this.profileUser();\n      }));\n    }\n\n    RegisterLogin_facebook(data) {\n      return this.http.post(`${this.Url}/reg-log-facebook`, data).pipe(tap(data => {// this.localStorageService.setState('token', data?.data?.api_token)\n        // this.profileUser();\n      }));\n    }\n\n    Login(data) {\n      return this.http.post(`${this.Url}/login`, data).pipe( // tslint:disable-next-line:no-shadowed-variable\n      tap(data => {\n        var _a, _b, _c, _d;\n\n        this.localStorageService.setState('token', (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.api_token);\n        let user = {\n          name: (_b = data === null || data === void 0 ? void 0 : data.data) === null || _b === void 0 ? void 0 : _b.name,\n          email: (_c = data === null || data === void 0 ? void 0 : data.data) === null || _c === void 0 ? void 0 : _c.email,\n          phone: (_d = data === null || data === void 0 ? void 0 : data.data) === null || _d === void 0 ? void 0 : _d.phone\n        };\n        localStorage.setItem('user', JSON.stringify(user)); // this.localStorageService.setState('user', data?.data);\n        // this.profileUser();\n      }));\n    }\n\n    Register(data) {\n      return this.http.post(`${this.Url}/register`, data).pipe(tap(data => {\n        var _a;\n\n        this.localStorageService.setState('token', (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.api_token); // this.profileUser();\n      }));\n    }\n\n    forget_password(data) {\n      return this.http.post(`${this.Url}/forget-password`, data);\n    }\n\n    foget_code(data) {\n      return this.http.post(`${this.Url}/forget-password-code`, data).pipe(tap(data => {\n        var _a;\n\n        this.localStorageService.setState('token', (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.api_token); // this.profileUser();\n      }));\n    } //not working now\n\n\n    CheckAuth() {\n      let token;\n\n      if (localStorage.getItem('state')) {\n        token = JSON.parse(localStorage.getItem('state') || \"\");\n        ;\n      } else {\n        token = {\n          token: ''\n        };\n      }\n\n      return this.http.post(`${env.ApiUrl}/customer/check-login`, {\n        api_token: token\n      });\n    } //not working now\n\n\n    EditPassword(password) {\n      return this.http.post(`${env.ApiUrl}/Test`, {\n        password\n      });\n    }\n\n    Logout() {\n      this.Toaster.showSuccess(\"تم تسجيل الخروج\"); // setTimeout(()=>{\n      //   location.reload();\n      // }\n      // ,1000)\n\n      this.dataTonav.emit(false);\n      this.userDataBehaviorSubject.next(null);\n      this.localStorageService.setState('token', null);\n      this.localStorageService.ClearStorage();\n    } //--------------------------- login with facebook--------------------------//\n\n\n    loginWithFacebook() {\n      this.socialAuthService.signIn(FacebookLoginProvider.PROVIDER_ID).then(res => {\n        let data = {\n          email: res === null || res === void 0 ? void 0 : res.email,\n          name: `${res.firstName} ${res.lastName}`,\n          facebook_id: res === null || res === void 0 ? void 0 : res.id,\n          device_token: '52151'\n        };\n        this.RegisterLogin_facebook(data).subscribe(res => {\n          this.storeLocalStorge(res);\n          this.router.navigateByUrl(this.currentURL || '');\n          console.log('You have been successfully logged in!');\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n    loginWithGoogle() {\n      this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then(res => {\n        // console.log(res);\n        // console.log(\"hello then\");\n        let data = {\n          email: res === null || res === void 0 ? void 0 : res.email,\n          name: `${res.firstName} ${res.lastName}`,\n          google_id: res === null || res === void 0 ? void 0 : res.id,\n          device_token: '52151'\n        };\n        this.RegisterLogin_google(data).subscribe(res => {\n          this.storeLocalStorge(res);\n          this.router.navigateByUrl(this.currentURL || '');\n          console.log('You have been successfully logged in!');\n        });\n      }).catch(err => {\n        // console.log(\"hello err\");\n        console.log(err);\n      });\n    }\n\n    signOut() {\n      this.socialAuthService.signOut();\n    }\n\n    storeLocalStorge(res) {\n      this.localStorageService.setState('token', res.data.api_token);\n      let user = {\n        name: res.data.name,\n        email: res.data.email,\n        phone: ''\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    requestPermission() {\n      const messaging = getMessaging(); // if ('serviceWorker' in navigator) {\n      //   navigator.serviceWorker.register('../firebase-messaging-sw.js')\n      //     .then(function(registration) {\n      //       // console.log('Registration successful, scope is:', registration.scope);\n      //     }).catch(function(err) {\n      //       // console.log('Service worker registration failed, error:', err);\n      //     });\n      //   }\n\n      getToken(messaging, {\n        vapidKey: environment.firebase.vapidKey\n      }).then(currentToken => {\n        if (currentToken) {\n          //  console.log(\"Hurraaa!!! we got the token.....\");\n          //  console.log(currentToken);  \n          this.deviceTokenTemp = currentToken;\n          this.deviceToken.emit(this.deviceTokenTemp);\n        } else {//  console.log('No registration token available. Request permission to generate one.');\n        }\n      }).catch(err => {\n        console.log('An error occurred while retrieving token. ', err);\n      });\n    }\n\n    listen() {\n      const messaging = getMessaging();\n      onMessage(messaging, payload => {\n        console.log('Message received. ', payload);\n        this.message = payload;\n      });\n    }\n\n    getDeviceToken() {\n      this.deviceToken.emit(this.deviceTokenTemp);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalstorageService), i0.ɵɵinject(i3.ToasterService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i4.ActivatedRoute), i0.ɵɵinject(i5.SocialAuthService), i0.ɵɵinject(i6.AngularFireAuth));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}