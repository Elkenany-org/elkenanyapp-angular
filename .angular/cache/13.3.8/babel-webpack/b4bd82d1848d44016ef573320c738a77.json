{"ast":null,"code":"export class StatisticsChart {\n  constructor() {\n    this.arr2 = [];\n  }\n\n  drowShart(data) {\n    var _a, _b, _c;\n\n    this.chartOptions = {};\n    this.arr2 = [];\n    let Result = [];\n\n    if (data.length > 0) {\n      for (let i = 0; i < data.length; i++) {\n        Result.push((_a = data[i]) === null || _a === void 0 ? void 0 : _a.changes);\n      }\n\n      if (data[0].categorize != null) {\n        for (let k = 0; k < Result.length; k++) {\n          this.arr2.push({\n            type: \"line\",\n            showInLegend: true,\n            name: data[k].categorize,\n            xValueFormatString: \"MMM DD, YYYY\",\n            dataPoints: []\n          });\n\n          for (let j = 0; j < Result[k].length; j++) {\n            if (Result[k][j].price != 0) {\n              this.arr2[k].dataPoints.push({\n                x: new Date(Result[k][j].date),\n                y: Result[k][j].change || Result[k][j].price\n              }); // Result[k][j].change\n\n              if (j + 1 < Result[k].length) {\n                let old = new Date(Result[k][j].date);\n                let neew = new Date(Result[k][j + 1].date);\n                let timeInMilisec = neew.getTime() - old.getTime();\n                let daysBetweenDates = Math.ceil(timeInMilisec / (1000 * 60 * 60 * 24));\n\n                if (daysBetweenDates > 1) {\n                  for (let i = 0; i < daysBetweenDates - 1; i++) {\n                    old.setDate(old.getDate() + 1);\n                    this.arr2[k].dataPoints.push({\n                      x: old,\n                      y: Result[k][j].change || Result[k][j].price\n                    }); // Result[k][j].change\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        for (let k = 0; k < Result.length; k++) {\n          this.arr2.push({\n            type: \"line\",\n            showInLegend: true,\n            name: data[k].name,\n            xValueFormatString: \"MMM DD, YYYY\",\n            dataPoints: []\n          });\n\n          for (let j = 0; j < Result[k].length; j++) {\n            if (Result[k][j].price != 0) {\n              this.arr2[k].dataPoints.push({\n                x: new Date(Result[k][j].date),\n                y: Result[k][j].change || Result[k][j].price\n              }); // Result[k][j].change\n\n              if (j + 1 < Result[k].length) {\n                let old = new Date(Result[k][j].date);\n                let neew = new Date(Result[k][j + 1].date);\n                let timeInMilisec = neew.getTime() - old.getTime();\n                let daysBetweenDates = Math.ceil(timeInMilisec / (1000 * 60 * 60 * 24));\n\n                if (daysBetweenDates > 1) {\n                  for (let i = 0; i < daysBetweenDates - 1; i++) {\n                    old.setDate(old.getDate() + 1);\n                    this.arr2[k].dataPoints.push({\n                      x: old,\n                      y: Result[k][j].change || Result[k][j].price\n                    }); // Result[k][j].change\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.chartOptions = {\n      zoomEnabled: true,\n      exportEnabled: true,\n      animationEnabled: true,\n      theme: \"light2\",\n      title: {// text: \"Actual vs Projected Sales\"\n      },\n      axisX: {\n        valueFormatString: \"D MMM YYYY\"\n      },\n      axisY: {\n        title: ((_b = data[0].changes[0]) === null || _b === void 0 ? void 0 : _b.price) ? \"price\" : \"change\",\n        valueFormatString: ((_c = data[0].changes[0]) === null || _c === void 0 ? void 0 : _c.price) ? \"#,##0 LE\" : \"#,##0\" // includeZero: true,\n\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: function (e) {\n          // console.log(\"dds\");\n          if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n            // console.log(e);\n            e.dataSeries.visible = false; // console.log('d');\n          } else {\n            // console.log(e);\n            e.dataSeries.visible = true;\n          }\n\n          e.chart.render();\n        }\n      },\n      data: this.arr2\n    };\n    return this.chartOptions;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}